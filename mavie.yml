openapi: 3.0.0
paths:
  /login:
    post:
      summary: Customer Login
      description: 'This endpoint allows a customer to login to the system, set a jwt token in the cookie and return the list of products purchased by the customer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the customer
                password:
                  type: string
                  description: The password of the customer
                remember_me:
                  type: boolean
                  description: 'If true, set both the refresh token and access token in the cookie, if false, only set the access token in the cookie'
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: |
                there are two cookies set in the response, the access token is set to be httpOnly and secure, the refresh token is set to be httpOnly and secure, the refresh token is only included if remember_me is true
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
                - refresh_token: The JWT refresh token to be used to refresh the access token, this is valid for 1 hour or 30 days depending on the value of remember_me
              schema:
                type: string
                example: |
                  "access_token:jwt token here; Secure, HttpOnly"
                  "refresh_token:jwt token here; Secure, HttpOnly"
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth/get/responses/200/content/application~1json/schema'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /auth:
    get:
      summary: know if the user is still logged in
      description: 'This endpoint allows the front end to know if the user is still logged in, this api uses http-only cookie for authorization, so the front end should not send any authorization header to the backend'
      responses:
        '200':
          headers:
            Set-Cookie:
              description: |
                refreshed access token which will be valid for another 10 minutes
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
              schema:
                type: string
                example: 'access_token:jwt token here; Secure, HttpOnly'
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    description: The id of the user
                  productList:
                    type: array
                    description: The list of products purchased by the customer
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the product
                        name:
                          type: string
                          description: The name of the product
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /persona:
    get:
      summary: get persona category api
      description: 'This endpoint allows the front end to get the persona category, which is used for the persona filter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Persona'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}':
    get:
      summary: Get a specific product's info
      description: This endpoint allows the front end to get information about a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: |
                refreshed access token which will be valid for another 10 minutes
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
              schema:
                $ref: '#/paths/~1auth/get/responses/200/headers/Set-Cookie/schema'
          content:
            application/json:
              schema:
                type: object
                properties:
                  brand:
                    type: string
                    description: The brand of the product
                  brandIcon:
                    type: string
                    description: The brand icon of the product
                  description:
                    type: string
                    description: The description of the product
                  image:
                    type: string
                    description: The image link of the product
                  modelName:
                    type: string
                    description: The model name of the product
                  productCategoryName:
                    type: string
                    description: The product category of the product
                  expertOpinion:
                    type: string
                    description: The expert opinion of the product
                  overallRating:
                    type: number
                    description: 'The overall rating of the product, float number, fixed to 2 decimal places'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/filter':
    get:
      summary: Get a specific product's filter info
      description: This endpoint allows the front end to get information about the filter of a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: |
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
              schema:
                $ref: '#/paths/~1auth/get/responses/200/headers/Set-Cookie/schema'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFilterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/rating':
    get:
      summary: Get a specific product rating info
      description: This endpoint allows the front end to get information about the rating of a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
        - name: minAge
          in: query
          required: true
          description: The minimum age of the personas
          schema:
            type: integer
        - name: maxAge
          in: query
          required: true
          description: The maximum age of the personas
          schema:
            type: integer
        - name: female
          in: query
          required: true
          description: include female personas or not
          schema:
            type: boolean
        - name: male
          in: query
          required: true
          description: include male personas or not
          schema:
            type: boolean
        - name: selectedPersonas
          in: query
          required: true
          description: The selected personas
          schema:
            type: array
            items:
              type: integer
              description: The id of the persona
        - name: selectedDomains
          in: query
          required: true
          description: The selected domains
          schema:
            type: array
            items:
              type: integer
              description: The id of the domain
        - name: featuresOn
          in: query
          required: true
          description: The features that are turned on
          schema:
            type: boolean
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: |
                refreshed access token which will be valid for another 10 minutes
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
              schema:
                $ref: '#/paths/~1auth/get/responses/200/headers/Set-Cookie/schema'
          content:
            application/json:
              schema:
                type: object
                properties:
                  overallRating:
                    type: number
                    description: The overall rating of the product
                    example: 4.5
                  domainRatings:
                    type: array
                    description: The domain ratings of the product
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the domain
                        rating:
                          type: number
                          description: The rating of the domain
                          example: 4.5
                  featureRatings:
                    type: array
                    description: 'The feature ratings of the product, only include this if the request params featuresOn is true'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the feature
                        rating:
                          type: number
                          description: The rating of the feature
                          example: 4.5
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/feature/{featureId}':
    get:
      summary: 'Get a specific product''s feature rating info, mainly the percentages of the ratings given by the users'
      description: 'this api is used for the feature popup in the front end, it will be used for the percentage split'
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
        - name: featureId
          in: path
          required: true
          description: The id of the feature
          schema:
            type: integer
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: |
                refreshed access token which will be valid for another 10 minutes
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
              schema:
                $ref: '#/paths/~1auth/get/responses/200/headers/Set-Cookie/schema'
          content:
            application/json:
              schema:
                type: object
                description: The response body
                properties:
                  percentages:
                    type: array
                    description: The percentages of the ratings given by the users
                    items:
                      type: number
                      description: 'The percentage of the rating, the index+1 of the array is the rating'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/codesigner':
    get:
      summary: get codesigner report based on filter parameters
      description: 'This endpoint allows the front end to get the codesigner report based on filter parameters, the result will render the codesigner report, the query parameters are optional, if not provided, the api will return all the codesigner report info'
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
        - in: query
          name: personaX_min
          schema:
            type: integer
            description: The minimum value of the personaX
        - in: query
          name: personaX_max
          schema:
            type: integer
            description: The maximum value of the personaX
        - in: query
          name: age_min
          schema:
            type: integer
            description: The minimum value of the age
        - in: query
          name: age_max
          schema:
            type: integer
            description: The maximum value of the age
        - in: query
          name: female
          schema:
            type: boolean
            description: if female included or not
        - in: query
          name: male
          schema:
            type: boolean
            description: if male included or not
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The id of the persona
                    name:
                      type: string
                      description: The name of the persona
                    profile:
                      type: string
                      description: The head image url of the persona
                    report:
                      type: string
                      description: 'The report url of the persona, this is only'
  '/product/{productId}/shareLink':
    get:
      summary: send a share request and return a randomly generated uuid
      description: 'This endpoint allows the front end to send a share request and return a randomly generated uuid, the uuid will be used to generate a share link, the share link will be used to share the product with other users'
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: |
                refreshed access token which will be valid for another 10 minutes
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
              schema:
                $ref: '#/paths/~1auth/get/responses/200/headers/Set-Cookie/schema'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: The randomly generated uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/verifyCode':
    post:
      summary: frontend use this api to verify the randomly generated uuid and related product id
      description: 'when a user access the product page with a share link, the frontend will call this api to verify the uuid and product id'
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: the product id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: the randomly generated uuid
      responses:
        '200':
          description: the uuid is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: the message of the verification
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/shareViaEmail':
    post:
      summary: post a sending pdf document request to other users via email
      description: This endpoint allows the front end to send a pdf document to other users via email
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: array
                  items:
                    type: string
                    description: The email address of the user to send the pdf document to
                document:
                  type: string
                  format: binary
                  description: The PDF document to send.
              required:
                - email
                - document
      responses:
        '200':
          description: 'OK, the pdf document has been sent to the user''s email'
          headers:
            Set-Cookie:
              description: |
                refreshed access token which will be valid for another 10 minutes
                - access_token: The JWT token to be used for authentication, this is valid for 10 minutes
              schema:
                $ref: '#/paths/~1auth/get/responses/200/headers/Set-Cookie/schema'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message indicating the success of the request
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
info:
  title: Mavie API
  description: API for Mavie Customer Backend
  version: 2.0.0
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ProductFilterResponse:
      type: object
      properties:
        domains:
          type: array
          description: The list of domains for the product
          items:
            $ref: '#/components/schemas/Domain'
        features:
          type: array
          description: The list of features for the product
          items:
            $ref: '#/components/schemas/Feature'
    Domain:
      type: object
      properties:
        id:
          type: integer
          description: The id of the domain
        name:
          type: string
          description: The name of the domain
        importance:
          type: number
          description: 'The importance of the domain, from 0 to 1'
        icon:
          type: string
          description: The icon svg of the domain
        roundIcon:
          type: string
          description: The round icon svg of the domain
        featureIds:
          type: array
          description: The list of feature ids for the domain
          items:
            type: integer
            description: The id of the feature
        description:
          type: string
          description: The description of the domain
    Feature:
      type: object
      properties:
        id:
          type: integer
          description: The id of the feature
        name:
          type: string
          description: The name of the feature
        importance:
          type: number
          description: 'The importance of the feature, from 0 to 1'
        icon:
          type: string
          description: 'The icon svg of the feature, purple background'
        description:
          type: string
          description: The description of the feature
    Persona:
      type: object
      properties:
        id:
          type: integer
          description: The id of the persona
        name:
          type: string
          description: The name of the persona
        icon:
          type: string
          description: The icon svg of the persona
        isBinary:
          type: boolean
          description: 'Whether the persona''s metric is binary. If false, then persona rating is from 1 to 5, otherwise it is 0 or 1'
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
