openapi: 3.0.0
paths:
  /login:
    post:
      summary: Customer Login
      description: 'This endpoint allows a customer to login to the system, it returns a JWT token that can be used to authenticate future requests and a refresh token that can be used to refresh the JWT token and the list of product purchased by this customer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the customer
                password:
                  type: string
                  description: The password of the customer
                remember_me:
                  type: boolean
                  description: 'If true, the JWT token will be valid for 30 days, otherwise it will be valid for 1 hour'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: 'The JWT token to be used for authentication, this is valid for 10 minutes'
                  refresh_token:
                    type: string
                    description: 'The JWT refresh token to be used to refresh the access token, this is valid for 1 hour or 30 days depending on the value of remember_me'
                  products:
                    type: array
                    description: The list of products purchased by the customer
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the product
                        name:
                          type: string
                          description: The name of the product
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /signup:
    post:
      summary: Create a new user with a uuid generated by share
      description: 'Create a new user, this is a special signup endpoint which allows the front end to create a new user with a uuid generated by share, the user should be able to visit the product linked by the uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user
                password:
                  type: string
                  description: The password of the user
                uuid:
                  type: string
                  description: The uuid generated by share
      responses:
        '201':
          description: successfull signup a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: 'The JWT token to be used for authentication, valid for 10 minutes.'
                  refresh_token:
                    type: string
                    description: 'The refresh token to be used for getting a new JWT token, valid for 30 days.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /refresh_token:
    post:
      summary: Get a new JWT token by using the refresh token
      description: This endpoint allows the front end to get a new JWT access token by using the refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: The refresh token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: 'The JWT token to be used for authentication, valid for 10 minutes.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}':
    get:
      summary: Get a specific product's info
      description: This endpoint allows the front end to get information about a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  brand:
                    type: string
                    description: The brand of the product
                  brandIcon:
                    type: string
                    description: The brand icon of the product
                  description:
                    type: string
                    description: The description of the product
                  image:
                    type: string
                    description: The image link of the product
                  modelName:
                    type: string
                    description: The model name of the product
                  productCategoryName:
                    type: string
                    description: The product category of the product
                  expertOpinion:
                    type: string
                    description: The expert opinion of the product
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/filter':
    get:
      summary: Get a specific product's filter info
      description: This endpoint allows the front end to get information about the filter of a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFilterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/rating':
    get:
      summary: Get a specific product rating info
      description: This endpoint allows the front end to get information about the rating of a specific product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
        - name: minAge
          in: query
          required: true
          description: The minimum age of the personas
          schema:
            type: integer
        - name: maxAge
          in: query
          required: true
          description: The maximum age of the personas
          schema:
            type: integer
        - name: female
          in: query
          required: true
          description: include female personas or not
          schema:
            type: boolean
        - name: male
          in: query
          required: true
          description: include male personas or not
          schema:
            type: boolean
        - name: selectedPersonas
          in: query
          required: true
          description: The selected personas
          schema:
            type: array
            items:
              type: integer
              description: The id of the persona
        - name: selectedDomains
          in: query
          required: true
          description: The selected domains
          schema:
            type: array
            items:
              type: integer
              description: The id of the domain
        - name: featuresOn
          in: query
          required: true
          description: The features that are turned on
          schema:
            type: boolean
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  overallRating:
                    type: number
                    description: The overall rating of the product
                    example: 4.5
                  domainRatings:
                    type: array
                    description: The domain ratings of the product
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the domain
                        rating:
                          type: number
                          description: The rating of the domain
                          example: 4.5
                  featureRatings:
                    type: array
                    description: 'The feature ratings of the product, only include this if the request params featuresOn is true'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the feature
                        rating:
                          type: number
                          description: The rating of the feature
                          example: 4.5
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/feature/{featureId}':
    get:
      summary: Get a specific product's feature rating info
      description: This endpoint allows the front end to get information about the detail feature rating of a specific product
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
        - name: featureId
          in: path
          required: true
          description: The id of the feature
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: The questions rating of the feature
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The id of the question
                    score:
                      type: number
                      description: The score of the question
                    importance:
                      type: number
                      description: The importance of the question
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/product/{productId}/share':
    get:
      summary: send sharing email containing a sharing link to the user
      description: 'This endpoint allows the front end to send sharing email containing a sharing link to the user, the backend should generate a link with a uuid which could be used to access the shared product for new user or existed user, the uuid should be generated by the backend and stored in the database, linked with the user id and product id'
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message of the response
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/client/{clientId}/addAccess/{productId}':
    put:
      summary: allow user to visit the product page
      description: 'when the front end user login via share and found the user has no access to the product, the front end will send a request to this endpoint to add the access to the product for the user'
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product
          schema:
            type: integer
        - name: clientId
          in: path
          required: true
          description: The id of the client
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: The uuid generated by share
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message of the response
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
info:
  title: Mavie API
  description: API for Mavie Customer Backend
  version: 1.0.0
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ProductFilterResponse:
      type: object
      properties:
        domains:
          type: array
          description: The list of domains for the product
          items:
            $ref: '#/components/schemas/Domain'
        features:
          type: array
          description: The list of features for the product
          items:
            $ref: '#/components/schemas/Feature'
        personas:
          type: array
          description: The list of personas for the product
          items:
            $ref: '#/components/schemas/Persona'
        ageRange:
          type: object
          description: The age range for the product
          properties:
            minAge:
              type: integer
              description: The minimum age for the product
            maxAge:
              type: integer
              description: The maximum age for the product
    Domain:
      type: object
      properties:
        id:
          type: integer
          description: The id of the domain
        name:
          type: string
          description: The name of the domain
        importance:
          type: number
          description: The importance of the domain
        icon:
          type: string
          description: The icon svg of the domain
        roundIcon:
          type: string
          description: The round icon svg of the domain
        featureIds:
          type: array
          description: The list of feature ids for the domain
          items:
            type: integer
            description: The id of the feature
        description:
          type: string
          description: The description of the domain
    Feature:
      type: object
      properties:
        id:
          type: integer
          description: The id of the feature
        name:
          type: string
          description: The name of the feature
        importance:
          type: number
          description: The importance of the feature
        icon:
          type: string
          description: 'The icon svg of the feature, purple background'
        description:
          type: string
          description: The description of the feature
    Persona:
      type: object
      properties:
        id:
          type: integer
          description: The id of the persona
        name:
          type: string
          description: The name of the persona
        icon:
          type: string
          description: The icon svg of the persona
        roundButtonSelected:
          type: string
          description: The round button selected svg of the persona
        roundButtonUnselected:
          type: string
          description: The round button unselected svg of the persona
        description:
          type: string
          description: The description of the persona
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: The error message
